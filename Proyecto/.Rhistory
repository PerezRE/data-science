Max.2.5.U = Max.2.5.1,
Avg.2.5.U = Avg.2.5.1)
# Ordenamos las columnas
d1019S <- select(d1019S, colnames(d1920S))
# Volvemos a unir
d1020S <- rbind(d1019S, d1920S)
# Renombramos
d1020S <- rename(d1020S, date = Date, home.team = HomeTeam, home.score = FTHG, away.team = AwayTeam, away.score = FTAG)
# Ordenamos columnas
data <- select(d1020S, date, home.team, home.score, away.team, away.score:Avg.2.5.U) # Este data frame contiene todos los datos necesarios
head(data, n = 2L); tail(data, n = 2L)
# Data frames de partidos y equipos
md <- data %>% select(date:away.score)
write.csv(md, "match.data.csv", row.names = FALSE)
df <- create.fbRanks.dataframes(scores.file = "match.data.csv")
teams <- df$teams; scores <- df$scores
head(teams, n = 2L); dim(teams); head(scores, n = 2L); dim(scores)
# Conjuntos iniciales de entrenamiento y de prueba
f <- scores$date # Fechas de partidos
fu <- unique(f) # Fechas sin repetici?n
Ym <- format(fu, "%Y-%m") # Meses y a?os
Ym <- unique(Ym) # Meses y a?os sin repetir
places <- which(Ym[15]==format(scores$date, "%Y-%m")) # Consideramos partidos de 15 meses para comenzar a ajustar el modelo
ffe <- scores$date[max(places)] # Fecha final conjunto de entrenamiento
#Consideraremos partidos de 15 meses para comenzar a ajustar el modelo. As?, nuestro primer conjunto de entrenamiento consiste de datos de partidos hasta el `r ffe`
train <- scores %>% filter(date <= ffe)
test <- scores %>% filter(date > ffe)
head(train, n = 1); tail(train, n = 1)
head(test, n = 1); tail(test, n = 1)
# Primer ajuste del modelo
traindate <- unique(train$date)
testdate <- unique(test$date)
ranks <- rank.teams(scores = scores, teams = teams,
min.date = traindate[1],
max.date = traindate[length(traindate)])
# Primera predicci?n
pred <- predict(ranks, date = testdate[1])
phs <- pred$scores$pred.home.score # predicted home score
pas <- pred$scores$pred.away.score # predicted away score
pht <- pred$scores$home.team # home team in predictions
pat <- pred$scores$away.team # away team in predictions
# Continuar ajustando y prediciendo
phs <- NULL; pas <- NULL; pht <- NULL; pat <- NULL
for(i in 1:(length(unique(scores$date))-170)){
ranks <- rank.teams(scores = scores, teams = teams,
min.date = unique(scores$date)[i],
max.date = unique(scores$date)[i+170-1],
silent = TRUE,
time.weight.eta = 0.0005)
pred <- predict(ranks, date = unique(scores$date)[i+170],
silent = TRUE)
phs <- c(phs, pred$scores$pred.home.score) # predicted home score
pas <- c(pas, pred$scores$pred.away.score) # predicted away score
pht <- c(pht, pred$scores$home.team) # home team in predictions
pat <- c(pat, pred$scores$away.team) # away team in predictions
}
# Eliminamos NA's
buenos <- !(is.na(phs) | is.na(pas)) #
phs <- phs[buenos] # predicted home score
pas <- pas[buenos] # predicted away score
pht <- pht[buenos] # home team in predictions
pat <- pat[buenos] # away team in predictions
momio <- data %>% filter(date >= unique(scores$date)[171]) # momios conjunto de prueba
momio <- momio[buenos,]
mean(pht == momio$home.team); mean(pat == momio$away.team)
mean(phs + pas > 2.5 & momio$home.score + momio$away.score > 2.5)
mean(phs + pas < 2.5 & momio$home.score + momio$away.score < 2.5)
hs <- momio$home.score
as <- momio$away.score
# Probabilidades condicionales
mean(phs + pas > 3) # proporci?n de partidos con m?s de tres goles seg?n el modelo
mean(phs + pas > 3 & hs + as > 2.5)/mean(phs + pas > 3)
# probabilidad condicional estimada de ganar en over 2.5
mean(phs + pas < 2.1) # proporci?n de partidos con menos de 2.1 goles seg?n el modelo
mean(phs + pas < 2.1 & hs + as < 2.5)/mean(phs + pas < 2.1)
# probabilidad condicional estimada de ganar en under 2.5
# Apuestas con momios m?ximos
cap <- 50000; g <- NULL
for(j in 1:length(phs)){
if(((phs[j] + pas[j]) > 3) & (0.64/(momio$Max.2.5.O[j]^-1) > 1)){
if((hs[j] + as[j]) > 2.5) cap <- cap + 1000*(momio$Max.2.5.O[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
if(((phs[j] + pas[j]) < 2.1) & (0.58/(momio$Max.2.5.U[j]^-1) > 1)){
if((hs[j] + as[j]) < 2.5) cap <- cap + 1000*(momio$Max.2.5.U[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
}
# Escenario con momios m?ximos
g <- data.frame(Num_Ap = 1:length(g), Capital = g)
p <- ggplot(g, aes(x=Num_Ap, y=Capital)) + geom_line( color="purple") + geom_point() +
labs(x = "N?mero de Apuesta",
y = "Capital",
title = "Realizando una secuencia de apuestas") +
theme(plot.title = element_text(size=12))  +
theme(axis.text.x = element_text(face = "bold", color="blue" , size = 10, angle = 25, hjust = 1),
axis.text.y = element_text(face = "bold", color="blue" , size = 10, angle = 25, hjust = 1))  # color, ?ngulo y estilo de las abcisas y ordenadas
p
# Escenario con momios promedio
cap <- 50000; g <- NULL
for(j in 1:length(phs)){
if(((phs[j] + pas[j]) > 3) & (0.64/(momio$Avg.2.5.O[j]^-1) > 1)){
if((hs[j] + as[j]) > 2.5) cap <- cap + 1000*(momio$Avg.2.5.O[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
if(((phs[j] + pas[j]) < 2.1) & (0.58/(momio$Avg.2.5.U[j]^-1) > 1)){
if((hs[j] + as[j]) < 2.5) cap <- cap + 1000*(momio$Avg.2.5.U[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
}
g <- data.frame(Num_Ap = 1:length(g), Capital = g)
p <- ggplot(g, aes(x=Num_Ap, y=Capital)) + geom_line( color="purple") + geom_point() +
labs(x = "N?mero de Apuesta",
y = "Capital",
title = "Realizando una secuencia de apuestas") +
theme(plot.title = element_text(size=12))  +
theme(axis.text.x = element_text(face = "bold", color="blue" , size = 10, angle = 25, hjust = 1),
axis.text.y = element_text(face = "bold", color="blue" , size = 10, angle = 25, hjust = 1))  # color, ?ngulo y estilo de las abcisas y ordenadas
p
runApp('~/workspace/courses/bedu/modulo 2/datascience/Postworks/Postwork Sesión 8/postwork8')
runApp('~/workspace/courses/bedu/modulo 2/datascience/Postworks/Postwork Sesión 8/postwork8')
runApp('~/workspace/courses/bedu/modulo 2/datascience/Postworks/Postwork Sesión 8/postwork8')
# Leemos los datos
data <- read.csv("https://raw.githubusercontent.com/PerezRE/datascience/main/Proyecto/data/videojuegos_2.csv")
View(data)
setwd("~/workspace/courses/bedu/modulo 2/datascience/Proyecto")
str(data)
summary(data)
# Leemos los datos
videogames <- read.csv("https://raw.githubusercontent.com/PerezRE/datascience/main/Proyecto/data/videojuegos_2.csv")
# Revisamos la estructura del data frame
class(videogames); str(videogames);
# 1. ¿Qué género/videojuego resultó con mayor/menor descuento?
which.min(videogames$achievements)
# 1. ¿Qué género/videojuego resultó con mayor/menor descuento?
videomgames[which.min(videogames$achievements),]
# 1. ¿Qué género/videojuego resultó con mayor/menor descuento?
videogames[which.min(videogames$achievements),]
# 1. ¿Qué género/videojuego resultó con mayor/menor descuento?
videogames[which.min(videogames$achievements),]$name
# 1. ¿Qué género/videojuego resultó con mayor/menor descuento?
videogames[which.min(videogames$achievements),]$release_date
# 2. ¿Qué videojuego ha sido el más/menos jugado?
videogames[which.min(videogames$average_playtime),]$name
videogames[which.max(videogames$average_playtime),]$name
videogames[min, c("name", "release_date")]
# 2. ¿Qué videojuego ha sido el más/menos jugado?
min <- which.min(videogames$average_playtime)
videogames[min, c("name", "release_date")]
# Revisamos la estructura del data frame
class(videogames); str(videogames);
# 2. ¿Qué videojuego ha sido el más/menos jugado?
videogames[which.min(videogames$average_playtime), c("name", "release_date", "average_playtime")]
videogames[which.max(videogames$average_playtime), c("name", "release_date", "average_playtime")]
# 5. ¿Qué género/videojuego resultó más económico y caro?
videogames[which.min(videogames$price), c("name", "release_date", "average_playtime")]
videogames[which.max(videogames$price), c("name", "release_date", "average_playtime")]
# 5. ¿Qué género/videojuego resultó más económico y caro?
videogames[which.min(videogames$price), c("name", "release_date", "average_playtime")]
# 5. ¿Qué género/videojuego resultó más económico y caro?
videogames[which.min(videogames$price), c("name", "release_date", "price")]
videogames[which.max(videogames$price), c("name", "release_date", "price")]
# 5. ¿Qué género/videojuego resultó más económico y caro?
columns <- c("name", "release_date", "price")
videogames[which.min(videogames$price), columns]
videogames[which.max(videogames$price), columns]
# 2. ¿Qué videojuego ha sido el más/menos jugado?
columns <- c("name", "release_date", "average_playtime")
videogames[which.min(videogames$average_playtime), columns]
videogames[which.max(videogames$average_playtime), columns]
# 5. ¿Qué género/videojuego resultó más económico y caro?
columns <- c("name", "release_date", "price", "genre")
videogames[which.min(videogames$price), columns]
# 5. ¿Qué género/videojuego resultó más económico y caro?
columns <- c("name", "release_date", "price")
videogames[which.min(videogames$price), columns]
videogames[which.max(videogames$price), columns]
# 6. ¿Cuál género resulta más caro/económico?
videogames$steamspy_tags
# 6. ¿Cuál género resulta más caro/económico?
videogames$achievements
# 6. ¿Cuál género resulta más caro/económico?
videogames$median_playtime
# 6. ¿Cuál género resulta más caro/económico?
videogames$genre_Sexual.Content
# 6. ¿Cuál género resulta más caro/económico?
videogames[videogames$genre_Sexual.Content == T, ]
# 6. ¿Cuál género resulta más caro/económico?
videogames[videogames$genre_Sexual.Content == T, columns]
# 7. De diversos géneros, obtener, ¿Qué tan viable es que el genero/videojuego sea jugado por horas?
plot(videogames$median_playtime)
plot(videogames$average_playtime)
library(ggplot2)
ggplot(videogames)
+ aes(nname, average_playtime)
+ geom_bar(stat="identity", aes(fill="name"), data=videogames, alpha = 0.5)
ggplot(videogames) +
aes(nname, average_playtime) +
geom_bar(stat="identity", aes(fill="name"), data=videogames, alpha = 0.5)
library(dplyr)
library(ggplot2)
ggplot(videogames) +
aes(average_playtime) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio") +
xlab("Videojuego") +
theme_dark()
data <- videogames$average_playtime/100
data
ggplot(data) +
#aes(average_playtime) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio * 100") +
xlab("Videojuego") +
theme_dark()
class(data)
data <- as.data.frame(videogames$average_playtime/100)
ggplot(data) +
#aes(average_playtime) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio * 100") +
xlab("Videojuego") +
theme_dark()
ggplot(data) +
#aes(average_playtime) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio * 100") +
xlab("Videojuego") +
theme_dark()
data
tail(data)
colnames(data) <- "Horas jugadas"
ggplot(data) +
aes(average_playtime) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio * 100") +
xlab("Videojuego") +
theme_dark()
str(data)
colnames(data) <- "HorasJugadas"
ggplot(data) +
aes(HorasJugadas) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio * 100") +
xlab("Videojuego") +
theme_dark()
ggplot(data) +
aes(HorasJugadas) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio * 100") +
xlab("Videojuego") +
theme_light()
# Leemos los datos
videogames <- read.csv("https://raw.githubusercontent.com/PerezRE/datascience/main/Proyecto/data/videojuegos_2.csv")
horasJugadas <- videogames$average_playtime/1000
colnames(horasJugadas) <- "HorasJugadas"
ggplot(horasJugadas) +
aes(HorasJugadas) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio * 1000") +
xlab("Videojuego") +
theme_light()
horasJugadas <- videogames$average_playtime/1000
horasJugadas <- as.data.frame(videogames$average_playtime/1000)
colnames(horasJugadas) <- "HorasJugadas"
ggplot(horasJugadas) +
aes(HorasJugadas) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio * 1000") +
xlab("Videojuego") +
theme_light()
horasJugadas <- as.data.frame(videogames$average_playtime)
colnames(horasJugadas) <- "HorasJugadas"
ggplot(horasJugadas) +
aes(HorasJugadas) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio * 1000") +
xlab("Videojuego") +
theme_light()
horasJugadas <- as.data.frame(videogames$average_playtime)
colnames(horasJugadas) <- "HorasJugadas"
ggplot(horasJugadas) +
aes(HorasJugadas) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio * 1000") +
xlab("Videojuego") +
theme_light()
horasJugadas <- as.data.frame(videogames$average_playtime)
ggplot(horasJugadas) +
aes(HorasJugadas) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio * 1000") +
xlab("Videojuego") +
theme_light()
colnames(horasJugadas) <- "HorasJugadas"
ggplot(horasJugadas) +
aes(HorasJugadas) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio * 1000") +
xlab("Videojuego") +
theme_light()
ggplot(videogames) +
aes(names, average_playtime) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio * 1000") +
xlab("Videojuego") +
theme_light()
ggplot(videogames) +
aes(names) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio * 1000") +
xlab("Videojuego") +
theme_light()
ggplot(videogames) +
aes(names, average_playtime) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio * 1000") +
xlab("Videojuego") +
theme_light()
# Leemos los datos
videogames <- na.omit(read.csv("https://raw.githubusercontent.com/PerezRE/datascience/main/Proyecto/data/videojuegos_2.csv"))
# Revisamos la estructura del data frame
class(videogames); str(videogames);
ggplot(videogames) +
aes(names, average_playtime) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio * 1000") +
xlab("Videojuego") +
theme_light()
ggplot(videogames) +
aes(names, average_playtime) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio * 1000") +
xlab("Videojuego") +
theme_light()
# Tratando de graficar un histograma de las horas jugdas y el nombre del videojuego.
ggplot(videogames) +
aes(names, average_playtime) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio") +
xlab("Videojuego") +
theme_light()
# Tratando de graficar un histograma de las horas jugdas y el nombre del videojuego.
ggplot(videogames) +
aes(names, average_playtime) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio") +
xlab("Videojuego") +
theme_light()
# Tratando de graficar un histograma de las horas jugdas y el nombre del videojuego.
ggplot(videogames) +
aes(names) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio") +
xlab("Videojuego") +
theme_light()
# Tratando de graficar un histograma de las horas jugdas y el nombre del videojuego.
ggplot(videogames) +
aes(average_playtime) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio") +
xlab("Videojuego") +
theme_light()
# Tratando de graficar un histograma de las horas jugdas y el nombre del videojuego.
plot(videogames)
# ¿Qué videojuego es el mejor/peor valorado?
columns <- c("name", "positive_ratings", "negative_ratings", "release_date")
videogames[which.min(videogames$positive_ratings), columns]
videogames[which.max(videogames$positive_ratings), columns]
videogames[which.min(videogames$negative_ratings), columns]
videogames[which.max(videogames$negative_ratings), columns]
videogames[which.max(videogames$negative_ratings), columns]
videogames[which.max(videogames$positive_ratings), columns]
# ¿Qué videojuego ha sido el más/menos jugado?
columns <- c("name", "release_date", "average_playtime")
videogames[which.min(videogames$average_playtime), columns]
videogames[which.max(videogames$average_playtime), columns]
videogames[which.min(videogames$median_playtime), columns]
# ¿Qué videojuego ha sido el más/menos jugado?
columns <- c("name", "release_date", "average_playtime", "median_playtime")
videogames[which.min(videogames$average_playtime), columns]
videogames[which.max(videogames$average_playtime), columns]
videogames[which.min(videogames$median_playtime), columns]
videogames[which.max(videogames$median_playtime), columns]
# Leemos los datos
videogames <- na.omit(read.csv("https://raw.githubusercontent.com/PerezRE/datascience/main/Proyecto/data/videojuegos_2.csv"))
# Leemos los datos
videogames <- na.omit(read.csv("https://raw.githubusercontent.com/PerezRE/datascience/main/Proyecto/data/videojuegos_2.csv", header=T))
model <- lm(price ~ positive_ratings)
# Leemos los datos
videogames <- na.omit(read.csv("https://raw.githubusercontent.com/PerezRE/datascience/main/Proyecto/data/videojuegos_2.csv", header=TRUE))
model <- lm(price ~ positive_ratings)
model <- lm(videogames$price ~ videogames$positive_ratings)
summary(model)
model <- lm(videogames$price ~ videogames$release_date)
summary(model)
model <- lm(videogames$price ~ videogames$achievements)
summary(model)
model <- lm(videogames$price ~ videogames$achievements + videogames$release_date)
summary(model)
plot(model)
# Tratando de graficar un histograma de las horas jugadas y el nombre del videojuego.
ggplot(videogames) +
aes(average_playtime) +
geom_histogram(binwidth = 10, col="white", fill="orange", alpha=0.8) +
ggtitle("Histograma de horas jugadas en promedio") +
ylab("Horas jugadas en promedio") +
xlab("Videojuego") +
theme_light()
View(videogames)
View(videogames)
# Visualizamos un resumen para cada variable de los datos obtenidos.
summary(videogames)
# Visualizamos un resumen para cada variable de los datos obtenidos.
summary(videogames)
# Leemos los datos
videogames <- na.omit(read.csv("https://raw.githubusercontent.com/PerezRE/datascience/main/Proyecto/data/videojuegos_2.csv", header=TRUE))
# Revisamos la estructura del data frame
class(videogames); str(videogames);
videogames$
videogames[-c("X.1", "X", "appid", "columna1", "Title")]
videogames[,-c("X.1", "X", "appid", "columna1", "Title")]
videogames <- videogames[, -which(names(videogames) %in% c("X.1", "X", "appid", "columna1", "Title"))]
videogames <- videogames[, -which(names(videogames) %in% c("X.1", "X", "appid", " olumna1", "Title"))]
videogames <- videogames[, -which(names(videogames) %in% c("X.1", "X", "appid", "Columna1", "Title"))]
# Leemos los datos
videogames <- na.omit(read.csv("https://raw.githubusercontent.com/PerezRE/datascience/main/Proyecto/data/videojuegos_2.csv", header=TRUE))
videogames <- videogames[, -which(names(videogames) %in% c("X.1", "X", "appid", "Columna1", "Title"))]
# Leemos los datos
videogames <- na.omit(read.csv("https://raw.githubusercontent.com/PerezRE/datascience/main/Proyecto/data/videojuegos_2.csv", header=TRUE))
videogames[, -which(names(videogames) %in% c("X.1", "X", "appid", "Columna1", "Title"))]
library(dplyr)
library(ggplot2)
# 7. Histograma de ratings.
ggplot(videogames) +
aes(positive_ratings) +
geom_histogram(binwidth = 10, col="orange", fill="yellow", alpha=0.8) +
ggtitle("Histograma de Ratings positivos") +
ylab("Rating") +
xlab("Videojuego") +
theme_light()
dev.off()
# 7. Histograma de ratings.
ggplot(videogames) +
aes(positive_ratings) +
geom_histogram(binwidth = 10, col="orange", fill="yellow", alpha=0.8) +
ggtitle("Histograma de Ratings positivos") +
ylab("Rating") +
xlab("Videojuego") +
theme_light()
# 7. Histograma de ratings.
ggplot(videogames) +
aes(positive_ratings) +
geom_histogram(binwidth = 10, col="orange", fill="yellow", alpha=0.8) +
ggtitle("Histograma de Ratings positivos") +
ylab("Rating") +
xlab("Videojuego") +
theme_light()
# 7. Histograma de ratings.
ggplot(videogames$positive_ratings) +
aes(positive_ratings) +
geom_histogram(binwidth = 10, col="orange", fill="yellow", alpha=0.8) +
ggtitle("Histograma de Ratings positivos") +
ylab("Rating") +
xlab("Videojuego") +
theme_light()
# 7. Histograma de ratings.
videogames %>% ggplot() +
aes(positive_ratings) +
geom_histogram(binwidth = 10, col="orange", fill="yellow", alpha=0.8) +
ggtitle("Histograma de Ratings positivos") +
ylab("Rating") +
xlab("Videojuego") +
theme_light()
# 7. Histograma de ratings.
ggplot(videogames) +
aes(name) +
geom_histogram(binwidth = 10, col="orange", fill="yellow", alpha=0.8) +
ggtitle("Histograma de Ratings positivos") +
ylab("Rating") +
xlab("Videojuego") +
theme_light()
# Leemos los datos
videogames <- na.omit(read.csv("https://raw.githubusercontent.com/PerezRE/datascience/main/Proyecto/data/dataset_2.csv", header=TRUE))
# Leemos los datos
videogames <- na.omit(read.csv("https://raw.githubusercontent.com/PerezRE/datascience/main/Proyecto/data/dataset%202.csv", header=TRUE))
